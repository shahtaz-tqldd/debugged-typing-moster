[
    {
        "id": 1,
        "image": "https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80",
        "title": "Local Storage and Sessional Storage",
        "body": "What Is Local Storage?\nLocal storage maintains data across all instances of a site, whether they're in different tabs or windows. It is also permanent, so the data won't disappear when you close your browser.\n\nWhen you open a website that previously used local storage, it will always have access to that stored data.\n\nSession Storage\nA browsing session approximates your use of a website. If you visit a site, browse around for a bit, then turn off your computer, you can think of that time as a single session. Your browser configuration may change this in subtle ways, but a session aims to represent the chunk of time you interact with a site.\n\nSession storage is unique to each browser tab. If you open a new tab and navigate to the same site, you'll start a new session with its own storage. However, if you use a 'duplicate tab' feature in your browser, that may reuse the same session. You can't rely too much on the specific details of a 'session'. Instead, focus on the core concept: session storage is temporary."
    },
    {
        "id": 2,
        "image": "https://miro.medium.com/max/1400/1*KxHwVbB0zhnSVrhrWtT-gg.jpeg",
        "title": "Block Scope and Global Scope in JS",
        "body": "JavaScript is pretty renowned in the current programming market, and that is due to its vast usage. Becoming a JavaScript developer is not only a good job but it is now essential to survive in the programming market. Javascript, just like any other programming language, depends on the use of variables. And each variable has its own scope.\n\nIn programming, the scope is defined as the accessibility of the variable. Or in more technical terms, it is the reference to the context of the code. So, how can we differentiate between the scope of the variables, and on what factors does this “scope” depend? Well, we are going to cover everything related to variable scope in JavaScript. \n\nGlobal Scope\nThe variables defined outside of any function or curly brackets are known as global variables and have global scope. Global scope means that the variables can be accessed from any part of that program, any function or conditional state can access that variable.\n\nBlock Scope\nBlock scope is also a sub-type of local scope. The block scope can be defined as the scope of the variables inside the curly brackets {}. Now, these curly brackets can be of loops, or conditional statements, or something else. You are only allowed to refer to these variables from within the curly brackets {}."
    },
    {
        "id": 3,
        "image": "https://deinfo.uepg.br/~alunoso/2020/SO/NODE.JS/dist/images/nodejsarch.jpg",
        "title": "How does even Eventloop work in Javascript?",
        "body": "We’ll start with a somewhat of an odd claim — despite allowing async JavaScript code (like the setTimeout we just discussed), until ES6, JavaScript itself has actually never had any direct notion of asynchronicity built into it. The JavaScript engine has never done anything more than executing a single chunk of your program at any given moment.\n\nFor more details on how JavaScript engines work (Google’s V8 specifically), check one of our previous articles on the topic.\n\nSo, who tells the JS Engine to execute chunks of your program? In reality, the JS Engine doesn’t run in isolation — it runs inside a hosting environment, which for most developers is the typical web browser or Node.js. Actually, nowadays, JavaScript gets embedded into all kinds of devices, from robots to light bulbs. Every single device represents a different type of hosting environment for the JS Engine.\n\n”The common denominator in all environments is a built-in mechanism called the event loop, which handles the execution of multiple chunks of your program over time, each time invoking the JS Engine.”\n\nThis means that the JS Engine is just an on-demand execution environment for any arbitrary JS code. It’s the surrounding environment that schedules the events (the JS code executions).\n\nSo, for example, when your JavaScript program makes an Ajax request to fetch some data from the server, you set up the “response” code in a function (the “callback”), and the JS Engine tells the hosting environment:\n\n“Hey, I’m going to suspend execution for now, but whenever you finish with that network request, and you have some data, please call this function back.”\n\nThe browser is then set up to listen for the response from the network, and when it has something to return to you, it will schedule the callback function to be executed by inserting it into the event loop."
    },
    {
        "id": 4,
        "image": "https://blog.alexdevero.com/wp-content/uploads/2021/02/01-02-21-undefined-and-null-in-javascript-explained-blog.jpg",
        "title": "How many ways you can get 'undefined' in your JS code?",
        "body": "There are some definite ways to get undefined in js. \n\n1.If we use a value without an introduction.\n2.If the value can not be accessed \n3.The reference is not cleared        "
    }

]